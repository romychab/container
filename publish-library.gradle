apply plugin: 'maven-publish'
apply plugin: 'signing'

task libraryKotlinSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.java.srcDirs
    from sourceSets.main.kotlin.srcDirs
}

task javadocJar(type: Jar, dependsOn: dokkaHtml) {
    archiveClassifier.set("javadoc")
    from new File("${buildDir}/dokka/html")
}

artifacts {
    archives libraryKotlinSourcesJar
    archives javadocJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

afterEvaluate {
    publishing {
        repositories {
            maven {
                name = "build"
                url = uri(rootProject.layout.buildDirectory.dir("maven"))
            }
        }
        publications {
            release(MavenPublication) {
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION
                from components.java
                artifact libraryKotlinSourcesJar
                artifact javadocJar

                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'Helper classes for dealing with async data loading easier'
                    url = 'https://github.com/romychab/container'
                    licenses {
                        license {
                            name = 'Apache License 2.0'
                            url = 'https://github.com/romychab/container/blob/main/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'romychab'
                            name = 'Roman Andrushchenko'
                            email = 'rom.andrushchenko@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:github.com/romychab/container.git'
                        developerConnection = 'scm:git:ssh://github.com/romychab/container.git'
                        url = 'https://github.com/romychab/container/tree/main'
                    }
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
        rootProject.ext["signing.keyId"],
        rootProject.ext["signing.key"],
        rootProject.ext["signing.password"],
    )
    sign publishing.publications
}
